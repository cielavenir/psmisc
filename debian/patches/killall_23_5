Use killall from 23.5

--- psmisc-23.4.orig/src/killall.c
+++ psmisc-23.4/src/killall.c
@@ -2,7 +2,7 @@
  * killall.c - kill processes by name or list PIDs
  *
  * Copyright (C) 1993-2002 Werner Almesberger
- * Copyright (C) 2002-2021 Craig Small <csmall@dropbear.xyz>
+ * Copyright (C) 2002-2022 Craig Small <csmall@dropbear.xyz>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -38,6 +38,8 @@
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#include <sys/syscall.h>
+#include <fcntl.h>
 #include <getopt.h>
 #include <pwd.h>
 #include <regex.h>
@@ -230,16 +232,21 @@ static int get_ns(pid_t pid, int id) {
 }
 
 static int
-match_process_uid(pid_t pid, uid_t uid)
+match_process_uid(const int pidfd, uid_t uid)
 {
     char buf[128];
     uid_t puid;
     FILE *f;
+    int fd;
     int re = -1;
 
-    snprintf (buf, sizeof buf, PROC_BASE "/%d/status", pid);
-    if (!(f = fopen (buf, "r")))
+    if ( (fd = openat(pidfd, "status", O_RDONLY, 0)) < 0)
         return 0;
+    if (!(f = fdopen (fd, "r")))
+    {
+        close(fd);
+        return 0;
+    }
 
     while (fgets(buf, sizeof buf, f))
     {
@@ -249,7 +256,7 @@ match_process_uid(pid_t pid, uid_t uid)
             break;
         }
     }
-    fclose(f);
+    close(fd);
     if (re==-1)
     {
         fprintf(stderr, _("killall: Cannot get UID from process status\n"));
@@ -311,6 +318,18 @@ match_process_context(const pid_t pid, c
     return retval;
 }
 
+static int
+my_send_signal(
+    const int pidfd,
+    const pid_t pid,
+    const int sig)
+{
+#ifdef __NR_pidfd_send_signal
+    if (pid > 0) /* Not PGID */
+        return syscall(__NR_pidfd_send_signal, pidfd, sig, NULL, 0);
+#endif
+    return kill(pid, sig);
+}
 
 static void
 free_regexp_list(regex_t *reglist, int names)
@@ -377,29 +396,28 @@ build_nameinfo(const int names, char **n
 
 static int
 load_process_name_and_age(char *comm, double *process_age_sec,
-                          const pid_t pid, int load_age)
+                          const int pidfd, int load_age)
 {
+    int fd;
     FILE *file;
-    char *path;
     char buf[1024];
     char *startcomm, *endcomm;
     unsigned lencomm;
     *process_age_sec = 0;
 
-    if (asprintf (&path, PROC_BASE "/%d/stat", pid) < 0)
+    if ( (fd = openat(pidfd, "stat", O_RDONLY, 0)) < 0)
         return -1;
-    if (!(file = fopen (path, "r")))
+    if (!(file = fdopen (fd, "r")))
     {
-        free(path);
+        close(fd);
         return -1;
     }
-    free (path);
     if (fgets(buf, 1024, file) == NULL)
     {
-        fclose(file);
+        close(fd);
         return -1;
     }
-    fclose(file);
+    close(fd);
     if ( NULL == ( startcomm = strchr(buf, '(')))
        return -1;
     startcomm++;
@@ -426,21 +444,22 @@ load_process_name_and_age(char *comm, do
 }
 
 static int
-load_proc_cmdline(const pid_t pid, const char *comm, char **command, int *got_long)
+load_proc_cmdline(const int pidfd, const pid_t pid, const char *comm, const int check_comm_length, char **command, int *got_long)
 {
     FILE *file;
-    char *path, *p, *command_buf;
+    int fp;
+    char *p, *command_buf;
     int cmd_size = 128;
     int okay;
 
-    if (asprintf (&path, PROC_BASE "/%d/cmdline", pid) < 0)
+    if ( (fp = openat(pidfd, "cmdline", O_RDONLY, 0)) < 0)
         return -1;
-    if (!(file = fopen (path, "r")))
+
+    if (!(file = fdopen (fp, "r")))
     {
-        free (path);
+        close(fp);
         return -1;
     }
-    free(path);
 
     if ( (command_buf = (char *)malloc (cmd_size)) == NULL)
         exit(1);
@@ -482,7 +501,7 @@ load_proc_cmdline(const pid_t pid, const
         }
         p = strrchr(command_buf,'/');
         p = p ? p+1 : command_buf;
-        if (strncmp(p, comm, COMM_LEN-1) == 0) {
+        if (strncmp(p, comm, check_comm_length) == 0) {
             okay = 1;
             if (!(*command = strdup(p))) {
                 free(command_buf);
@@ -491,7 +510,7 @@ load_proc_cmdline(const pid_t pid, const
             break;
         }
     }
-    (void) fclose(file);
+    (void) close(fp);
     free(command_buf);
     command_buf = NULL;
 
@@ -510,7 +529,7 @@ load_proc_cmdline(const pid_t pid, const
 static pid_t *
 create_pid_table(int *max_pids, int *pids)
 {
-    pid_t self, *pid_table;
+    pid_t self, *pid_table, *realloc_pid_table;
     int pid;
     DIR *dir;
     struct dirent *de;
@@ -535,11 +554,13 @@ create_pid_table(int *max_pids, int *pid
             continue;
         if (*pids == *max_pids)
         {
-            if (!(pid_table = realloc (pid_table, 2 * *pids * sizeof (pid_t))))
+            if (!(realloc_pid_table = realloc (pid_table, 2 * *pids * sizeof (pid_t))))
             {
                 perror ("realloc");
+                free(pid_table);
                 exit (1);
             }
+            pid_table = realloc_pid_table;
             *max_pids *= 2;
         }
         pid_table[(*pids)++] = pid;
@@ -564,8 +585,7 @@ static int match_process_name(
     {
         if (got_long)
         {
-            return (0 == strncmp2 (match_name, proc_cmdline, OLD_COMM_LEN - 1,
-                                   ignore_case));
+            return (0 == strcmp2 (match_name, proc_cmdline, ignore_case));
         } else {
             return (0 == strncmp2 (match_name, proc_comm, OLD_COMM_LEN - 1,
                                    ignore_case));
@@ -576,8 +596,7 @@ static int match_process_name(
     {
         if (got_long)
         {
-            return (0 == strncmp2 (match_name, proc_cmdline, COMM_LEN - 1,
-                                   ignore_case));
+            return (0 == strcmp2 (match_name, proc_cmdline, ignore_case));
         } else {
             return (0 == strncmp2 (match_name, proc_comm, COMM_LEN - 1,
                                    ignore_case));
@@ -597,12 +616,13 @@ kill_all(int signal, int name_count, cha
 {
     struct stat st;
     NAMEINFO *name_info = NULL;
-    char *path, comm[COMM_LEN];
+    char comm[COMM_LEN];
     char *command = NULL;
     pid_t *pid_table, *pid_killed;
     pid_t *pgids = NULL;
     int i, j, length, got_long, error;
     int pids, max_pids, pids_killed;
+    int pidfd = 0;
     unsigned long found;
     regex_t *reglist = NULL;
     long ns_ino = 0;
@@ -640,8 +660,16 @@ kill_all(int signal, int name_count, cha
         pid_t id;
         int found_name = -1;
         double process_age_sec = 0;
+        char pidpath[256];
+
+        /* Open PID directory */
+        if (pidfd > 0)
+            close(pidfd);
+        snprintf (pidpath, sizeof pidpath, PROC_BASE "/%d", pid_table[i]);
+        if ( (pidfd = open(pidpath, O_RDONLY|O_DIRECTORY)) < 0)
+            continue;
         /* match by UID */
-        if (pwent && match_process_uid(pid_table[i], pwent->pw_uid)==0)
+        if (pwent && match_process_uid(pidfd, pwent->pw_uid)==0)
             continue;
         if (opt_ns_pid && ns_ino && ns_ino != get_ns(pid_table[i], PIDNS))
             continue;
@@ -649,7 +677,7 @@ kill_all(int signal, int name_count, cha
 	if (scontext && match_process_context(pid_table[i], scontext) == 0)
 	    continue;
 
-        length = load_process_name_and_age(comm, &process_age_sec, pid_table[i], (younger_than||older_than));
+        length = load_process_name_and_age(comm, &process_age_sec, pidfd, (younger_than||older_than));
         if (length < 0)
             continue;
 
@@ -664,8 +692,9 @@ kill_all(int signal, int name_count, cha
             free(command);
             command = NULL;
         }
-        if (length == COMM_LEN - 1)
-            if (load_proc_cmdline(pid_table[i], comm, &command, &got_long) < 0)
+
+        if (length == COMM_LEN - 1 || length == OLD_COMM_LEN - 1)
+            if (load_proc_cmdline(pidfd, pid_table[i], comm, length, &command, &got_long) < 0)
                 continue;
 
         /* match by process name */
@@ -686,9 +715,7 @@ kill_all(int signal, int name_count, cha
 
                 } else {
                     int ok = 1; 
-                    if (asprintf (&path, PROC_BASE "/%d/exe", pid_table[i]) < 0)
-                        continue;
-                    if (stat (path, &st) < 0) 
+                    if (fstatat(pidfd, "exe", &st, 0) < 0)
                         ok = 0;
                     else if (name_info[j].st.st_dev != st.st_dev ||
                              name_info[j].st.st_ino != st.st_ino)
@@ -700,12 +727,11 @@ kill_all(int signal, int name_count, cha
                         char *linkbuf = malloc(len + 1);
 
                         if (!linkbuf ||
-                            readlink(path, linkbuf, len + 1) != (ssize_t)len ||
+                            readlinkat(pidfd, "exe", linkbuf, len + 1) != (ssize_t)len ||
                             memcmp(namelist[j], linkbuf, len))
                             ok = 0;
                         free(linkbuf);
                     }
-                    free(path);
                     if (!ok)
                         continue;
                 }
@@ -738,7 +764,7 @@ kill_all(int signal, int name_count, cha
         }    
         if (interactive && !ask (comm, id, signal))
             continue;
-        if (kill (process_group ? -id : id, signal) >= 0)
+        if (my_send_signal (pidfd, process_group ? -id : id, signal) >= 0)
         {
             if (verbose)
                 fprintf (stderr, _("Killed %s(%s%d) with signal %d\n"), got_long ? command :
@@ -757,6 +783,8 @@ kill_all(int signal, int name_count, cha
     if (reglist)
         free_regexp_list(reglist, name_count);
     free(pgids);
+    if (pidfd > 0)
+        close(pidfd);
     if (!quiet)
         for (i = 0; i < name_count; i++)
             if (!(found & (1UL << i)))
@@ -834,7 +862,7 @@ void print_version()
 {
     fprintf(stderr, "killall (PSmisc) %s\n", VERSION);
     fprintf(stderr, _(
-                      "Copyright (C) 1993-2021 Werner Almesberger and Craig Small\n\n"));
+                      "Copyright (C) 1993-2022 Werner Almesberger and Craig Small\n\n"));
     fprintf(stderr, _(
                       "PSmisc comes with ABSOLUTELY NO WARRANTY.\n"
                       "This is free software, and you are welcome to redistribute it under\n"
